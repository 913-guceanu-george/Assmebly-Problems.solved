     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 2918                        a DW 1829h
    15 00000002 3914                        b DW 1439h
    16 00000004 00000000                    c DD 0
    17 00000008 0000                        aux dw 0
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;Given the words A and B, compute the doubleword C as follows:
    24                                          ;the bits 0-6 of C have the value 0
    25                                          ;the bits 7-9 of C are the same as the bits 0-2 of A
    26                                          ;the bits 10-15 of C are the same as the bits 8-13 of B
    27                                          ;the bits 16-31 of C have the value 1
    28                                          
    29 00000000 B800000000                      mov eax, 0
    30 00000005 66A1[00000000]                  mov ax, [a]
    31 0000000B C1C80D                          ror EAX, 13
    32 0000000E 66A3[00000000]                  mov [a], ax ; now we have in a only the bits 0-2
    33                                          
    34 00000014 B800000000                      mov eax, 0
    35 00000019 66A1[02000000]                  mov ax, [b]
    36 0000001F C1C807                          ror eax, 7
    37 00000022 66A3[08000000]                  mov [aux], ax ; bits 8-16
    38 00000028 B800000000                      mov eax, 0
    39 0000002D 66A1[08000000]                  mov ax, [aux]
    40 00000033 C1C806                          ror eax, 6 ; bits 8-13 are in front
    41 00000036 66A3[08000000]                  mov [aux], ax
    42 0000003C 662B05[08000000]                sub ax, [aux]
    43 00000043 C1C006                          rol eax, 6
    44 00000046 66A3[02000000]                  mov [b], ax ; now we have in b the bits 8-13 of b
    45                                          
    46 0000004C BB00000000                      mov ebx, 0
    47 00000051 66BBFFFF                        mov bx, -1 ; 16 bits of 1
    48 00000055 C1C306                          rol ebx, 6
    49 00000058 66031D[02000000]                add bx, [b]
    50 0000005F C1C303                          rol ebx, 3
    51 00000062 66031D[00000000]                add bx, [a]
    52 00000069 C1C307                          rol ebx, 7
    53 0000006C 891D[04000000]                  mov [c],ebx
    54                                          ; exit(0)
    55 00000072 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000074 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
